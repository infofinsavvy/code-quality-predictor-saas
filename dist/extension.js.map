{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/prediction/AnalysisEngine.ts",".././src/tracking/QualityTracker.ts",".././src/extension.ts","../external commonjs \"vscode\"",".././src/tracking/CodePatternDetector.ts",".././src/prediction/models/LinearRegressionModel.ts",".././src/ui/CodeQualityProvider.ts",".././src/storage/DataStorage.ts",".././src/prediction/models/ProjectAnalyzer.ts","../external node-commonjs \"fs\"",".././src/prediction/models/TimeSeriesModel.ts","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { QualityTracker } from '../tracking/QualityTracker';\nimport { LinearRegressionModel } from './models/LinearRegressionModel';\nimport { TimeSeriesModel } from './models/TimeSeriesModel';\nimport { ProjectAnalyzer } from './models/ProjectAnalyzer';\nimport { DataStorage } from '../storage/DataStorage';\n\nexport interface AnalysisResult {\n    overallQuality: number;\n    bugRisk: number;\n    maintainabilityScore: number;\n    performanceScore: number;\n    confidence: number;\n    recommendations: string[];\n}\n\nexport interface QualityPattern {\n    timestamp: number;\n    qualityScore: number;\n    sessionDuration: number;\n    linesAnalyzed: number;\n    filesModified: number;\n    issuesFound: number;\n    projectType: string;\n    complexity: number;\n}\n\nexport class AnalysisEngine {\n    private regressionModel: LinearRegressionModel;\n    private timeSeriesModel: TimeSeriesModel;\n    public projectAnalyzer: ProjectAnalyzer;\n    public storage: DataStorage;\n    private qualityHistory: QualityPattern[] = [];\n    private isLearning: boolean = true;\n\n    constructor(\n        private context: vscode.ExtensionContext,\n        private qualityTracker: QualityTracker\n    ) {\n        this.storage = new DataStorage(context);\n        this.regressionModel = new LinearRegressionModel();\n        this.timeSeriesModel = new TimeSeriesModel();\n        this.projectAnalyzer = new ProjectAnalyzer();\n        \n        this.loadHistoricalData();\n        this.startLearning();\n    }\n\n    /**\n     * Main analysis method - generates comprehensive quality analysis\n     */\n    async generateAnalysis(): Promise<AnalysisResult> {\n        const recentQuality = this.getRecentQuality();\n        const projectMetrics = await this.projectAnalyzer.analyzeCurrentProject();\n        \n        // Calculate base quality score\n        const overallQuality = this.calculateQualityScore(recentQuality);\n        \n        // Enhanced analysis using ML models\n        const regressionAnalysis = this.regressionModel.predict(recentQuality, projectMetrics);\n        const trendAnalysis = this.timeSeriesModel.predict(this.qualityHistory);\n        \n        // Calculate bug risk\n        const bugRisk = this.calculateBugRisk(\n            regressionAnalysis.riskFactors,\n            projectMetrics.complexity\n        );\n        \n        // Calculate maintainability score\n        const maintainabilityScore = this.calculateMaintainability(\n            projectMetrics,\n            recentQuality\n        );\n        \n        // Calculate performance score\n        const performanceScore = this.calculatePerformance(\n            projectMetrics,\n            recentQuality\n        );\n\n        // Generate confidence score\n        const confidence = this.calculateConfidence(recentQuality.length);\n\n        // Generate improvement recommendations\n        const recommendations = this.generateQualityRecommendations(\n            recentQuality,\n            projectMetrics,\n            bugRisk\n        );\n\n        return {\n            overallQuality,\n            bugRisk,\n            maintainabilityScore,\n            performanceScore,\n            confidence,\n            recommendations\n        };\n    }\n\n    /**\n     * Record new quality data for learning\n     */\n    recordQuality(pattern: QualityPattern): void {\n        this.qualityHistory.push(pattern);\n        \n        // Keep only last 1000 entries for performance\n        if (this.qualityHistory.length > 1000) {\n            this.qualityHistory = this.qualityHistory.slice(-1000);\n        }\n\n        // Store to persistent storage\n        this.storage.saveQualityHistory(this.qualityHistory);\n\n        // Update models with new data\n        this.updateModels();\n    }\n\n    /**\n     * Detect if quality issues are likely\n     */\n    async detectQualityIssues(): Promise<{\n        probability: number;\n        severity: string;\n        reason: string;\n    }> {\n        const projectMetrics = await this.projectAnalyzer.analyzeCurrentProject();\n        const recentActivity = this.qualityTracker.getRecentActivity();\n\n        let probability = 0;\n        let severity = 'low';\n        let reason = '';\n\n        // Check for indicators of quality issues\n        if (recentActivity.complexityIncreases > 3) {\n            probability += 0.3;\n            reason += 'Code complexity increasing. ';\n        }\n\n        if (recentActivity.duplicateCodeDetected > 0) {\n            probability += 0.4;\n            severity = 'medium';\n            reason += 'Code duplication detected. ';\n        }\n\n        if (recentActivity.longFunctionsAdded) {\n            probability += 0.5;\n            severity = 'high';\n            reason += 'Long functions added. ';\n        }\n\n        if (projectMetrics.complexity > 0.7) {\n            probability += 0.3;\n            reason += 'High project complexity. ';\n        }\n\n        // Clamp probability to 0-1 range\n        probability = Math.min(1, Math.max(0, probability));\n\n        return {\n            probability,\n            severity,\n            reason: reason.trim() || 'No specific quality issues detected'\n        };\n    }\n\n    /**\n     * Get recent quality patterns for analysis\n     */\n    private getRecentQuality(): QualityPattern[] {\n        const now = Date.now();\n        const dayAgo = now - (24 * 60 * 60 * 1000);\n        \n        return this.qualityHistory.filter(pattern => pattern.timestamp > dayAgo);\n    }\n\n    /**\n     * Calculate overall quality score\n     */\n    private calculateQualityScore(recentQuality: QualityPattern[]): number {\n        if (recentQuality.length === 0) {\n            return 75; // Default quality score\n        }\n\n        const avgQuality = recentQuality.reduce((sum, pattern) => sum + pattern.qualityScore, 0) / recentQuality.length;\n        return Math.round(avgQuality);\n    }\n\n    /**\n     * Calculate bug risk percentage\n     */\n    private calculateBugRisk(riskFactors: any, complexity: number): number {\n        const baseRisk = complexity * 30; // Higher complexity = higher risk\n        const factorRisk = riskFactors?.bugProbability || 0;\n        \n        return Math.min(100, Math.max(0, baseRisk + factorRisk));\n    }\n\n    /**\n     * Calculate maintainability score\n     */\n    private calculateMaintainability(projectMetrics: any, recentQuality: QualityPattern[]): number {\n        const complexityFactor = (1 - projectMetrics.complexity) * 10;\n        const qualityFactor = this.calculateQualityScore(recentQuality) / 10;\n        \n        return Math.round(Math.min(10, Math.max(1, (complexityFactor + qualityFactor) / 2)));\n    }\n\n    /**\n     * Calculate performance score\n     */\n    private calculatePerformance(projectMetrics: any, recentQuality: QualityPattern[]): number {\n        const baseScore = 8; // Default good performance\n        const complexityPenalty = projectMetrics.complexity * 3;\n        \n        return Math.round(Math.min(10, Math.max(1, baseScore - complexityPenalty)));\n    }\n\n    /**\n     * Calculate confidence in analysis\n     */\n    private calculateConfidence(dataPoints: number): number {\n        if (dataPoints === 0) return 0.5;\n        if (dataPoints < 10) return 0.6;\n        if (dataPoints < 50) return 0.8;\n        return 0.95;\n    }\n\n    /**\n     * Generate quality improvement recommendations\n     */\n    private generateQualityRecommendations(\n        recentQuality: QualityPattern[],\n        projectMetrics: any,\n        bugRisk: number\n    ): string[] {\n        const recommendations = [];\n\n        if (bugRisk > 50) {\n            recommendations.push('High bug risk detected - consider refactoring complex functions');\n        }\n\n        if (projectMetrics.complexity > 0.7) {\n            recommendations.push('Project complexity is high - break down large components');\n        }\n\n        if (recentQuality.some(q => q.issuesFound > 5)) {\n            recommendations.push('Multiple issues found - implement stricter code review process');\n        }\n\n        recommendations.push('Maintain consistent coding standards');\n        recommendations.push('Add comprehensive unit tests');\n\n        return recommendations;\n    }\n\n    /**\n     * Export analytics data\n     */\n    exportAnalytics(): any {\n        return {\n            totalAnalyses: this.qualityHistory.length,\n            averageQuality: this.calculateQualityScore(this.qualityHistory),\n            trend: this.qualityHistory.length > 1 ? 'improving' : 'stable',\n            lastAnalysis: this.qualityHistory[this.qualityHistory.length - 1]?.timestamp || 0\n        };\n    }\n\n    /**\n     * Generate test data for development\n     */\n    generateTestData(): void {\n        const testPattern: QualityPattern = {\n            timestamp: Date.now(),\n            qualityScore: Math.floor(Math.random() * 40) + 60,\n            sessionDuration: Math.floor(Math.random() * 120) + 30,\n            linesAnalyzed: Math.floor(Math.random() * 500) + 100,\n            filesModified: Math.floor(Math.random() * 5) + 1,\n            issuesFound: Math.floor(Math.random() * 3),\n            projectType: 'TypeScript',\n            complexity: Math.random() * 0.5 + 0.3\n        };\n\n        this.recordQuality(testPattern);\n        vscode.window.showInformationMessage('Test quality data generated');\n    }\n\n    /**\n     * Get optimization tips\n     */\n    getOptimizationTips(): string[] {\n        return [\n            'Use consistent naming conventions',\n            'Keep functions small and focused',\n            'Add proper error handling',\n            'Write comprehensive tests',\n            'Document complex logic',\n            'Refactor duplicate code'\n        ];\n    }\n\n    /**\n     * Load historical data from storage\n     */\n    private async loadHistoricalData(): Promise<void> {\n        try {\n            const history = await this.storage.loadQualityHistory();\n            if (history && Array.isArray(history)) {\n                this.qualityHistory = history;\n            }\n        } catch (error) {\n            console.warn('Could not load quality history:', error);\n        }\n    }\n\n    /**\n     * Start the learning process\n     */\n    private startLearning(): void {\n        // Initialize with some base learning\n        this.isLearning = true;\n    }\n\n    /**\n     * Update ML models with new data\n     */\n    private updateModels(): void {\n        if (this.qualityHistory.length > 10) {\n            this.regressionModel.train(this.qualityHistory);\n            this.timeSeriesModel.train(this.qualityHistory);\n        }\n    }\n}","import * as vscode from 'vscode';\n\nexport interface QualityActivity {\n    complexityIncreases: number;\n    duplicateCodeDetected: number;\n    longFunctionsAdded: boolean;\n    filesAnalyzed: number;\n    issuesFound: number;\n}\n\nexport class QualityTracker {\n    private isTracking: boolean = false;\n    private sessionStart: number = 0;\n    private recentActivity: QualityActivity = {\n        complexityIncreases: 0,\n        duplicateCodeDetected: 0,\n        longFunctionsAdded: false,\n        filesAnalyzed: 0,\n        issuesFound: 0\n    };\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.sessionStart = Date.now();\n    }\n\n    /**\n     * Start tracking quality metrics\n     */\n    startTracking(): void {\n        this.isTracking = true;\n        this.sessionStart = Date.now();\n        console.log('Quality tracking started');\n    }\n\n    /**\n     * Stop tracking quality metrics\n     */\n    stopTracking(): void {\n        this.isTracking = false;\n        console.log('Quality tracking stopped');\n    }\n\n    /**\n     * Get recent quality activity\n     */\n    getRecentActivity(): QualityActivity {\n        return { ...this.recentActivity };\n    }\n\n    /**\n     * Record quality analysis result\n     */\n    recordQualityAnalysis(qualityScore: number, issuesFound: number): void {\n        if (!this.isTracking) return;\n\n        this.recentActivity.filesAnalyzed++;\n        this.recentActivity.issuesFound += issuesFound;\n\n        if (qualityScore < 50) {\n            this.recentActivity.complexityIncreases++;\n        }\n\n        console.log('Quality analysis recorded:', { qualityScore, issuesFound });\n    }\n\n    /**\n     * Record duplicate code detection\n     */\n    recordDuplicateCode(count: number): void {\n        if (!this.isTracking) return;\n        \n        this.recentActivity.duplicateCodeDetected += count;\n        console.log('Duplicate code detected:', count);\n    }\n\n    /**\n     * Record long function detection\n     */\n    recordLongFunction(): void {\n        if (!this.isTracking) return;\n        \n        this.recentActivity.longFunctionsAdded = true;\n        console.log('Long function detected');\n    }\n\n    /**\n     * Reset session data\n     */\n    resetSession(): void {\n        this.recentActivity = {\n            complexityIncreases: 0,\n            duplicateCodeDetected: 0,\n            longFunctionsAdded: false,\n            filesAnalyzed: 0,\n            issuesFound: 0\n        };\n        this.sessionStart = Date.now();\n    }\n\n    /**\n     * Get session duration in minutes\n     */\n    getSessionDuration(): number {\n        return Math.floor((Date.now() - this.sessionStart) / (1000 * 60));\n    }\n\n    /**\n     * Generate quality pattern for analysis\n     */\n    generateQualityPattern(projectType: string, complexity: number): any {\n        const sessionDuration = this.getSessionDuration();\n        \n        return {\n            timestamp: Date.now(),\n            qualityScore: Math.max(0, 100 - (this.recentActivity.issuesFound * 10)),\n            sessionDuration,\n            linesAnalyzed: this.recentActivity.filesAnalyzed * 50, // Estimate\n            filesModified: this.recentActivity.filesAnalyzed,\n            issuesFound: this.recentActivity.issuesFound,\n            projectType,\n            complexity\n        };\n    }\n\n    /**\n     * Dispose resources\n     */\n    dispose(): void {\n        this.stopTracking();\n    }\n}","import * as vscode from 'vscode';\nimport { AnalysisEngine } from './prediction/AnalysisEngine';\nimport { QualityTracker } from './tracking/QualityTracker';\nimport { DataStorage } from './storage/DataStorage';\nimport { CodeQualityProvider } from './ui/CodeQualityProvider';\nimport { CodePatternDetector } from './tracking/CodePatternDetector';\n\nlet analysisEngine: AnalysisEngine;\nlet qualityTracker: QualityTracker;\nlet patternDetector: CodePatternDetector;\nlet dataStorage: DataStorage;\nlet statusBarItem: vscode.StatusBarItem;\nlet burnRateStatusBar: vscode.StatusBarItem;\nlet treeDataProvider: CodeQualityProvider;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    console.log('🎯 Code Quality Predictor is activating...');\n\n    try {\n        // Initialize core components\n        dataStorage = new DataStorage(context);\n        await dataStorage.migrateData();\n\n        qualityTracker = new QualityTracker(context);\n        patternDetector = new CodePatternDetector(context, qualityTracker);\n        analysisEngine = new AnalysisEngine(context, qualityTracker);\n        \n        // Initialize UI components\n        createStatusBarItems(context);\n        treeDataProvider = new CodeQualityProvider(context, analysisEngine);\n        \n        // Register tree data provider\n        vscode.window.registerTreeDataProvider('codeQualityView', treeDataProvider);\n\n        // Register all commands\n        registerCommands(context);\n\n        // Start prediction engine and tracking\n        await initializePredictionSystem();\n\n        // Show welcome message for new users\n        await showWelcomeMessage(context);\n\n        console.log('✅ Code Quality Predictor activated successfully');\n\n    } catch (error) {\n        console.error('❌ Error activating Code Quality Predictor:', error);\n        vscode.window.showErrorMessage(\n            `Failed to activate Code Quality Predictor: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n    }\n}\n\nexport function deactivate() {\n    console.log('🔄 Code Quality Predictor is deactivating...');\n    \n    // Clean up resources\n    if (qualityTracker) {\n        qualityTracker.dispose();\n    }\n    \n    if (patternDetector) {\n        patternDetector.dispose();\n    }\n\n    if (statusBarItem) {\n        statusBarItem.dispose();\n    }\n\n    if (burnRateStatusBar) {\n        burnRateStatusBar.dispose();\n    }\n\n    console.log('✅ Code Quality Predictor deactivated');\n}\n\nfunction createStatusBarItems(context: vscode.ExtensionContext) {\n    // Main quality status bar\n    statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\n    statusBarItem.command = 'codeQuality.showQuality';\n    statusBarItem.show();\n    context.subscriptions.push(statusBarItem);\n\n    // Analysis status bar\n    burnRateStatusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 99);\n    burnRateStatusBar.command = 'codeQuality.predictIssues';\n    burnRateStatusBar.show();\n    context.subscriptions.push(burnRateStatusBar);\n}\n\nfunction updateStatusBar(qualityScore: number, bugRisk: number = 0) {\n    // Update main status bar\n    const icon = qualityScore >= 75 ? '🟢' : qualityScore >= 50 ? '🟡' : '🔴';\n    statusBarItem.text = `${icon} ${qualityScore}/100 Quality`;\n    statusBarItem.tooltip = `Code quality score: ${qualityScore}/100\\nClick to view analysis`;\n\n    // Update analysis status bar\n    if (bugRisk > 0) {\n        const riskIcon = bugRisk >= 70 ? '🔴' : bugRisk >= 40 ? '🟡' : '🟢';\n        burnRateStatusBar.text = `${riskIcon} ${bugRisk.toFixed(0)}% Risk`;\n        burnRateStatusBar.tooltip = `Bug risk: ${bugRisk.toFixed(0)}%\\nClick for predictions`;\n    } else {\n        burnRateStatusBar.text = `🟢 0% Risk`;\n        burnRateStatusBar.tooltip = 'No issues detected\\nClick for analysis';\n    }\n}\n\n// Analysis functions for code quality\nasync function analyzeCodeQuality(document: vscode.TextDocument) {\n    const text = document.getText();\n    const lines = text.split('\\n');\n    const extension = document.fileName.split('.').pop()?.toLowerCase();\n    \n    // Basic quality metrics\n    const linesOfCode = lines.filter(line => line.trim().length > 0).length;\n    const complexity = calculateComplexity(text, extension || '');\n    const duplicateLines = findDuplicateLines(lines);\n    const longFunctions = findLongFunctions(text, extension || '');\n    \n    // Calculate scores\n    const qualityScore = Math.max(0, Math.min(100, \n        100 - (complexity * 10) - (duplicateLines * 5) - (longFunctions * 15)\n    ));\n    \n    const bugRisk = Math.min(100, complexity * 15 + duplicateLines * 3 + longFunctions * 20);\n    const maintainability = Math.max(1, Math.min(10, 10 - (complexity * 2)));\n    const performance = Math.max(1, Math.min(10, 10 - (longFunctions * 3)));\n    \n    return {\n        qualityScore: Math.round(qualityScore),\n        bugRisk,\n        maintainability,\n        performance,\n        linesOfCode,\n        complexity,\n        issues: [\n            ...duplicateLines > 0 ? ['Code duplication detected'] : [],\n            ...longFunctions > 0 ? ['Long functions found'] : [],\n            ...complexity > 5 ? ['High complexity detected'] : []\n        ]\n    };\n}\n\nfunction calculateComplexity(text: string, extension: string): number {\n    const complexityPatterns = {\n        'if': /\\bif\\s*\\(/g,\n        'for': /\\bfor\\s*\\(/g,\n        'while': /\\bwhile\\s*\\(/g,\n        'switch': /\\bswitch\\s*\\(/g,\n        'catch': /\\bcatch\\s*\\(/g,\n        'ternary': /\\?\\s*.*?\\s*:/g\n    };\n    \n    let complexity = 1; // Base complexity\n    \n    for (const [pattern] of Object.entries(complexityPatterns)) {\n        const matches = text.match(complexityPatterns[pattern as keyof typeof complexityPatterns]);\n        if (matches) {\n            complexity += matches.length;\n        }\n    }\n    \n    return Math.min(10, complexity / 10);\n}\n\nfunction findDuplicateLines(lines: string[]): number {\n    const lineMap = new Map<string, number>();\n    let duplicates = 0;\n    \n    lines.forEach(line => {\n        const trimmed = line.trim();\n        if (trimmed.length > 10) { // Ignore short lines\n            const count = lineMap.get(trimmed) || 0;\n            lineMap.set(trimmed, count + 1);\n            if (count === 1) duplicates++;\n        }\n    });\n    \n    return duplicates;\n}\n\nfunction findLongFunctions(text: string, extension: string): number {\n    const functionPatterns = {\n        'js': /function\\s+\\w+\\s*\\([^)]*\\)\\s*{[^}]*}/g,\n        'ts': /(function\\s+\\w+|\\w+\\s*:\\s*\\([^)]*\\)\\s*=>)[^}]*}/g,\n        'py': /def\\s+\\w+\\s*\\([^)]*\\):[^\\n]*(?:\\n(?:\\s{4,}[^\\n]*|\\s*\\n))*\\n?/g\n    };\n    \n    const pattern = functionPatterns[extension as keyof typeof functionPatterns];\n    if (!pattern) return 0;\n    \n    const functions = text.match(pattern) || [];\n    return functions.filter(func => func.split('\\n').length > 20).length;\n}\n\nfunction registerCommands(context: vscode.ExtensionContext) {\n    // Core quality management commands\n    const analyzeFileCommand = vscode.commands.registerCommand(\n        'codeQuality.analyzeFile',\n        async () => {\n            const activeEditor = vscode.window.activeTextEditor;\n            if (!activeEditor) {\n                vscode.window.showWarningMessage('No file open for analysis');\n                return;\n            }\n\n            const document = activeEditor.document;\n            const analysis = await analyzeCodeQuality(document);\n            \n            updateStatusBar(analysis.qualityScore, analysis.bugRisk);\n            treeDataProvider.refresh();\n            \n            vscode.window.showInformationMessage(\n                `📊 Quality Score: ${analysis.qualityScore}/100\\\\n` +\n                `🐛 Bug Risk: ${analysis.bugRisk.toFixed(0)}%\\\\n` +\n                `🔧 Maintainability: ${analysis.maintainability}/10`\n            );\n        }\n    );\n\n    const showQualityCommand = vscode.commands.registerCommand(\n        'codeQuality.showQuality',\n        async () => {\n            const activeEditor = vscode.window.activeTextEditor;\n            if (!activeEditor) {\n                vscode.window.showWarningMessage('No file open for analysis');\n                return;\n            }\n\n            const analysis = await analyzeCodeQuality(activeEditor.document);\n            \n            const action = await vscode.window.showInformationMessage(\n                `📊 Quality Score: ${analysis.qualityScore}/100\\\\n` +\n                `🐛 Bug Risk: ${analysis.bugRisk.toFixed(0)}%\\\\n` +\n                `🔧 Maintainability: ${analysis.maintainability}/10\\\\n` +\n                `⚡ Performance: ${analysis.performance}/10`,\n                'View Detailed Analysis',\n                'Scan Project',\n                'Fix Issues'\n            );\n\n            if (action === 'View Detailed Analysis') {\n                vscode.commands.executeCommand('codeQuality.predictIssues');\n            } else if (action === 'Scan Project') {\n                vscode.commands.executeCommand('codeQuality.scanProject');\n            } else if (action === 'Fix Issues') {\n                vscode.commands.executeCommand('codeQuality.exportReport');\n            }\n        }\n    );\n\n    // Prediction and analysis commands\n    const predictIssuesCommand = vscode.commands.registerCommand(\n        'codeQuality.predictIssues',\n        async () => {\n            try {\n                const analysis = await analysisEngine.generateAnalysis();\n                \n                const panel = vscode.window.createWebviewPanel(\n                    'codeQualityPredictions',\n                    'Code Quality Predictions',\n                    vscode.ViewColumn.One,\n                    { enableScripts: true }\n                );\n\n                panel.webview.html = generatePredictionsHTML(analysis);\n            } catch (error) {\n                vscode.window.showErrorMessage('Failed to generate analysis: ' + (error as Error).message);\n            }\n        }\n    );\n\n    const refreshCommand = vscode.commands.registerCommand(\n        'codeQuality.refresh',\n        async () => {\n            const activeEditor = vscode.window.activeTextEditor;\n            if (activeEditor) {\n                const analysis = await analyzeCodeQuality(activeEditor.document);\n                updateStatusBar(analysis.qualityScore, analysis.bugRisk);\n            }\n            treeDataProvider.refresh();\n        }\n    );\n\n    const openSettingsCommand = vscode.commands.registerCommand(\n        'codeQuality.openSettings',\n        () => {\n            vscode.commands.executeCommand(\n                'workbench.action.openSettings', \n                'codeQuality'\n            );\n        }\n    );\n\n    // Register all commands with context\n    context.subscriptions.push(\n        analyzeFileCommand,\n        showQualityCommand,\n        predictIssuesCommand,\n        refreshCommand,\n        openSettingsCommand\n    );\n}\n\nasync function initializePredictionSystem() {\n    try {\n        // Load user settings\n        const settings = await dataStorage.loadUserSettings();\n        \n        // Initialize status bar\n        updateStatusBar(75, 15); // Default quality score and risk\n\n        // Start usage tracking if enabled\n        if (settings.enableAutoTracking) {\n            qualityTracker.startTracking();\n        }\n\n        // Schedule periodic quality checks\n        setInterval(async () => {\n            const activeEditor = vscode.window.activeTextEditor;\n            if (activeEditor && settings.enableAutoTracking) {\n                try {\n                    const analysis = await analyzeCodeQuality(activeEditor.document);\n                    updateStatusBar(analysis.qualityScore, analysis.bugRisk);\n                    \n                    // Check for quality warnings\n                    if (analysis.qualityScore < 50) {\n                        vscode.window.showWarningMessage(\n                            `⚠️ Low Quality Warning!\\\\n\\\\n` +\n                            `Quality Score: ${analysis.qualityScore}/100\\\\n` +\n                            `Bug Risk: ${analysis.bugRisk.toFixed(0)}%\\\\n` +\n                            `Consider refactoring this code.`,\n                            'Analyze File',\n                            'View Suggestions'\n                        ).then(action => {\n                            if (action === 'Analyze File') {\n                                vscode.commands.executeCommand('codeQuality.analyzeFile');\n                            } else if (action === 'View Suggestions') {\n                                vscode.commands.executeCommand('codeQuality.predictIssues');\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.error('Quality analysis error:', error);\n                }\n            }\n        }, 30000); // Update every 30 seconds\n\n    } catch (error) {\n        console.error('Error initializing prediction system:', error);\n    }\n}\n\nasync function showWelcomeMessage(context: vscode.ExtensionContext) {\n    const hasShownWelcome = context.globalState.get('codeQuality.hasShownWelcome');\n    \n    if (!hasShownWelcome) {\n        const action = await vscode.window.showInformationMessage(\n            '🎯 Welcome to AI Code Quality Predictor!\\\\n\\\\n' +\n            'This extension helps you predict and prevent code quality issues using AI-powered analysis.',\n            'Analyze Current File',\n            'Learn More',\n            'Dismiss'\n        );\n\n        if (action === 'Analyze Current File') {\n            vscode.commands.executeCommand('codeQuality.analyzeFile');\n        } else if (action === 'Learn More') {\n            vscode.commands.executeCommand('codeQuality.predictIssues');\n        }\n\n        await context.globalState.update('codeQuality.hasShownWelcome', true);\n    }\n}\n\n// HTML generation functions for webviews\nfunction generatePredictionsHTML(analysis: any): string {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Code Quality Analysis</title>\n        <style>\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 20px; background: #1e1e1e; color: #cccccc; }\n            .metric { background: #2d2d30; padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid #007acc; }\n            .metric h3 { margin: 0 0 10px 0; color: #569cd6; }\n            .metric-value { font-size: 24px; font-weight: bold; color: #4ec9b0; }\n            .quality-good { color: #4ec9b0; }\n            .quality-medium { color: #dcdcaa; }\n            .quality-poor { color: #f44747; }\n            .recommendation { background: #264f78; padding: 10px; margin: 5px 0; border-radius: 4px; }\n        </style>\n    </head>\n    <body>\n        <h1>📊 Code Quality Analysis</h1>\n        \n        <div class=\"metric\">\n            <h3>Overall Quality Score</h3>\n            <div class=\"metric-value quality-good\">85/100</div>\n        </div>\n\n        <div class=\"metric\">\n            <h3>Bug Risk</h3>\n            <div class=\"metric-value quality-good\">15%</div>\n        </div>\n\n        <div class=\"metric\">\n            <h3>Maintainability</h3>\n            <div class=\"metric-value quality-good\">8/10</div>\n        </div>\n\n        <div class=\"metric\">\n            <h3>Performance</h3>\n            <div class=\"metric-value quality-good\">7/10</div>\n        </div>\n\n        <h2>💡 Recommendations</h2>\n        <div class=\"recommendation\">Keep functions under 20 lines</div>\n        <div class=\"recommendation\">Add comprehensive unit tests</div>\n        <div class=\"recommendation\">Use consistent naming conventions</div>\n    </body>\n    </html>\n    `;\n}","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { QualityTracker } from './QualityTracker';\n\nexport class CodePatternDetector {\n    private disposables: vscode.Disposable[] = [];\n\n    constructor(\n        private context: vscode.ExtensionContext,\n        private qualityTracker: QualityTracker\n    ) {\n        this.setupFileWatchers();\n    }\n\n    /**\n     * Setup file watchers for pattern detection\n     */\n    private setupFileWatchers(): void {\n        // Watch for file changes\n        const watcher = vscode.workspace.onDidChangeTextDocument((event) => {\n            this.analyzeFileChanges(event);\n        });\n\n        this.disposables.push(watcher);\n    }\n\n    /**\n     * Analyze file changes for patterns\n     */\n    private analyzeFileChanges(event: vscode.TextDocumentChangeEvent): void {\n        const document = event.document;\n        const changes = event.contentChanges;\n\n        if (changes.length === 0) return;\n\n        // Analyze the document for quality patterns\n        this.detectPatterns(document);\n    }\n\n    /**\n     * Detect code patterns in document\n     */\n    private detectPatterns(document: vscode.TextDocument): void {\n        const text = document.getText();\n        let issuesFound = 0;\n\n        // Check for long functions\n        if (this.hasLongFunctions(text)) {\n            this.qualityTracker.recordLongFunction();\n            issuesFound++;\n        }\n\n        // Check for duplicate code patterns\n        const duplicateCount = this.findDuplicatePatterns(text);\n        if (duplicateCount > 0) {\n            this.qualityTracker.recordDuplicateCode(duplicateCount);\n            issuesFound += duplicateCount;\n        }\n\n        // Calculate basic quality score\n        const qualityScore = this.calculateQualityScore(text);\n        \n        // Record the analysis\n        this.qualityTracker.recordQualityAnalysis(qualityScore, issuesFound);\n    }\n\n    /**\n     * Check for long functions\n     */\n    private hasLongFunctions(text: string): boolean {\n        const functionPattern = /function\\s+\\w+\\s*\\([^)]*\\)\\s*{[^}]*}/g;\n        const functions = text.match(functionPattern) || [];\n        \n        return functions.some(func => func.split('\\n').length > 20);\n    }\n\n    /**\n     * Find duplicate code patterns\n     */\n    private findDuplicatePatterns(text: string): number {\n        const lines = text.split('\\n');\n        const lineMap = new Map<string, number>();\n        let duplicates = 0;\n\n        lines.forEach(line => {\n            const trimmed = line.trim();\n            if (trimmed.length > 10) {\n                const count = lineMap.get(trimmed) || 0;\n                lineMap.set(trimmed, count + 1);\n                if (count === 1) duplicates++;\n            }\n        });\n\n        return duplicates;\n    }\n\n    /**\n     * Calculate basic quality score\n     */\n    private calculateQualityScore(text: string): number {\n        const lines = text.split('\\n');\n        const linesOfCode = lines.filter(line => line.trim().length > 0).length;\n        \n        // Basic scoring based on various factors\n        let score = 100;\n        \n        // Penalize very long files\n        if (linesOfCode > 500) score -= 10;\n        if (linesOfCode > 1000) score -= 20;\n        \n        // Check for complexity indicators\n        const complexityIndicators = (text.match(/if\\s*\\(|for\\s*\\(|while\\s*\\(/g) || []).length;\n        score -= Math.min(30, complexityIndicators * 2);\n        \n        return Math.max(0, Math.min(100, score));\n    }\n\n    /**\n     * Generate usage report\n     */\n    generateUsageReport(): any {\n        return {\n            totalAnalyses: 0,\n            patternsDetected: [],\n            recommendations: [\n                'Keep functions under 20 lines',\n                'Avoid code duplication',\n                'Use consistent naming conventions'\n            ]\n        };\n    }\n\n    /**\n     * Dispose resources\n     */\n    dispose(): void {\n        this.disposables.forEach(d => d.dispose());\n    }\n}","import { QualityPattern } from '../AnalysisEngine';\n\nexport interface PredictionOutput {\n    daily: number;\n    weekly: number;\n    confidence: number;\n    riskFactors: {\n        bugProbability: number;\n    };\n}\n\nexport class LinearRegressionModel {\n    private weights: number[] = [];\n    private bias: number = 0;\n    private isTrained: boolean = false;\n\n    /**\n     * Train the model with quality history data\n     */\n    train(qualityHistory: QualityPattern[]): void {\n        if (qualityHistory.length < 5) {\n            console.log('Insufficient data for linear regression training');\n            return;\n        }\n\n        const features = this.extractFeatures(qualityHistory);\n        const targets = qualityHistory.map(quality => quality.qualityScore);\n\n        // Simple linear regression using least squares\n        this.trainLinearRegression(features, targets);\n        this.isTrained = true;\n    }\n\n    /**\n     * Predict quality trends based on current patterns\n     */\n    predict(recentQuality: QualityPattern[], projectMetrics: any): PredictionOutput {\n        if (!this.isTrained || recentQuality.length === 0) {\n            // Fallback to simple average-based prediction\n            return this.fallbackPrediction(recentQuality);\n        }\n\n        const features = this.extractFeaturesFromCurrent(recentQuality, projectMetrics);\n        const prediction = this.predictValue(features);\n\n        // Calculate bug probability based on quality trends\n        const bugProbability = Math.max(0, Math.min(100, (100 - prediction) * 0.8));\n\n        // Scale predictions for daily and weekly trends\n        const dailyTrend = prediction;\n        const weeklyTrend = prediction;\n        const confidence = this.calculatePredictionConfidence(recentQuality.length);\n\n        return {\n            daily: Math.max(0, Math.round(dailyTrend)),\n            weekly: Math.max(0, Math.round(weeklyTrend)),\n            confidence,\n            riskFactors: {\n                bugProbability\n            }\n        };\n    }\n\n    /**\n     * Extract numerical features from quality patterns for ML training\n     */\n    private extractFeatures(qualityHistory: QualityPattern[]): number[][] {\n        return qualityHistory.map(quality => [\n            quality.sessionDuration, // Session duration in minutes\n            quality.linesAnalyzed,\n            quality.filesModified,\n            quality.issuesFound,\n            quality.complexity,\n            this.encodeProjectType(quality.projectType),\n            this.getTimeOfDay(quality.timestamp),\n            this.getDayOfWeek(quality.timestamp)\n        ]);\n    }\n\n    /**\n     * Extract features from current quality patterns\n     */\n    private extractFeaturesFromCurrent(recentQuality: QualityPattern[], projectMetrics: any): number[] {\n        if (recentQuality.length === 0) {\n            return [0, 0, 0, 0, projectMetrics.complexity || 0.5, 0, 0, 0];\n        }\n\n        // Average recent quality patterns\n        const avgDuration = recentQuality.reduce((sum, quality) => \n            sum + quality.sessionDuration, 0) / recentQuality.length;\n        \n        const avgLines = recentQuality.reduce((sum, quality) => \n            sum + quality.linesAnalyzed, 0) / recentQuality.length;\n        \n        const avgFiles = recentQuality.reduce((sum, quality) => \n            sum + quality.filesModified, 0) / recentQuality.length;\n        \n        const avgIssues = recentQuality.reduce((sum, quality) => \n            sum + quality.issuesFound, 0) / recentQuality.length;\n        \n        const avgComplexity = recentQuality.reduce((sum, quality) => \n            sum + quality.complexity, 0) / recentQuality.length;\n\n        const latestProjectType = recentQuality[recentQuality.length - 1]?.projectType || 'Unknown';\n        const now = Date.now();\n\n        return [\n            avgDuration,\n            avgLines,\n            avgFiles,\n            avgIssues,\n            avgComplexity,\n            this.encodeProjectType(latestProjectType),\n            this.getTimeOfDay(now),\n            this.getDayOfWeek(now)\n        ];\n    }\n\n    /**\n     * Fallback prediction when model is not trained\n     */\n    private fallbackPrediction(recentQuality: QualityPattern[]): PredictionOutput {\n        if (recentQuality.length === 0) {\n            return {\n                daily: 75,\n                weekly: 75,\n                confidence: 0.3,\n                riskFactors: { bugProbability: 20 }\n            };\n        }\n\n        const avgQuality = recentQuality.reduce((sum, quality) => \n            sum + quality.qualityScore, 0) / recentQuality.length;\n\n        const avgIssues = recentQuality.reduce((sum, quality) => \n            sum + quality.issuesFound, 0) / recentQuality.length;\n\n        const bugProbability = Math.min(100, avgIssues * 15);\n\n        return {\n            daily: Math.round(avgQuality),\n            weekly: Math.round(avgQuality),\n            confidence: 0.5,\n            riskFactors: { bugProbability }\n        };\n    }\n\n    /**\n     * Simple linear regression training using least squares\n     */\n    private trainLinearRegression(features: number[][], targets: number[]): void {\n        const numFeatures = features[0].length;\n        this.weights = new Array(numFeatures).fill(0);\n        this.bias = 0;\n\n        const learningRate = 0.01;\n        const epochs = 100;\n\n        for (let epoch = 0; epoch < epochs; epoch++) {\n            for (let i = 0; i < features.length; i++) {\n                const prediction = this.predictValue(features[i]);\n                const error = targets[i] - prediction;\n\n                // Update weights\n                for (let j = 0; j < numFeatures; j++) {\n                    this.weights[j] += learningRate * error * features[i][j];\n                }\n                this.bias += learningRate * error;\n            }\n        }\n    }\n\n    /**\n     * Predict a single value using the trained model\n     */\n    private predictValue(features: number[]): number {\n        if (this.weights.length === 0) return 75; // Default quality score\n\n        let prediction = this.bias;\n        for (let i = 0; i < features.length; i++) {\n            prediction += this.weights[i] * features[i];\n        }\n        \n        return Math.max(0, Math.min(100, prediction)); // Clamp to 0-100\n    }\n\n    /**\n     * Calculate prediction confidence based on data amount\n     */\n    private calculatePredictionConfidence(dataPoints: number): number {\n        if (dataPoints === 0) return 0.3;\n        if (dataPoints < 10) return 0.5;\n        if (dataPoints < 50) return 0.7;\n        return 0.9;\n    }\n\n    /**\n     * Encode project type as numerical value\n     */\n    private encodeProjectType(projectType: string): number {\n        const typeMap: { [key: string]: number } = {\n            'JavaScript': 1,\n            'TypeScript': 2,\n            'Python': 3,\n            'Java': 4,\n            'C++': 5,\n            'C#': 6,\n            'Go': 7,\n            'Rust': 8,\n            'Unknown': 0\n        };\n        return typeMap[projectType] || 0;\n    }\n\n    /**\n     * Get time of day as normalized value (0-1)\n     */\n    private getTimeOfDay(timestamp: number): number {\n        const date = new Date(timestamp);\n        const hours = date.getHours();\n        return hours / 24;\n    }\n\n    /**\n     * Get day of week as normalized value (0-1)\n     */\n    private getDayOfWeek(timestamp: number): number {\n        const date = new Date(timestamp);\n        const day = date.getDay();\n        return day / 7;\n    }\n}","import * as vscode from 'vscode';\nimport { AnalysisEngine } from '../prediction/AnalysisEngine';\n\nexport class CodeQualityProvider implements vscode.TreeDataProvider<CodeQualityItem> {\n    private _onDidChangeTreeData: vscode.EventEmitter<CodeQualityItem | undefined | null | void> = new vscode.EventEmitter<CodeQualityItem | undefined | null | void>();\n    readonly onDidChangeTreeData: vscode.Event<CodeQualityItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n    constructor(\n        private context: vscode.ExtensionContext,\n        private analysisEngine: AnalysisEngine\n    ) {}\n\n    refresh(): void {\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: CodeQualityItem): vscode.TreeItem {\n        return element;\n    }\n\n    async getChildren(element?: CodeQualityItem): Promise<CodeQualityItem[]> {\n        if (!element) {\n            // Root level items\n            return [\n                new CodeQualityItem('Quality Overview', vscode.TreeItemCollapsibleState.Expanded, 'overview'),\n                new CodeQualityItem('Issue Predictions', vscode.TreeItemCollapsibleState.Expanded, 'predictions'),\n                new CodeQualityItem('Code Patterns', vscode.TreeItemCollapsibleState.Expanded, 'patterns')\n            ];\n        }\n\n        switch (element.contextValue) {\n            case 'overview':\n                return this.getOverviewItems();\n            case 'predictions':\n                return this.getPredictionItems();\n            case 'patterns':\n                return this.getPatternItems();\n            default:\n                return [];\n        }\n    }\n\n    private async getOverviewItems(): Promise<CodeQualityItem[]> {\n        try {\n            // Get current file quality if available\n            const activeEditor = vscode.window.activeTextEditor;\n            let qualityScore = 75; // Default\n            let bugRisk = 15; // Default\n            \n            if (activeEditor) {\n                // This would call the analysis function from extension.ts\n                // For now, using mock data\n                qualityScore = Math.floor(Math.random() * 40) + 60; // 60-100\n                bugRisk = Math.floor(Math.random() * 30) + 10; // 10-40\n            }\n            \n            return [\n                new CodeQualityItem(`📊 Quality Score: ${qualityScore}/100`, vscode.TreeItemCollapsibleState.None, 'quality'),\n                new CodeQualityItem(`🐛 Bug Risk: ${bugRisk}%`, vscode.TreeItemCollapsibleState.None, 'risk'),\n                new CodeQualityItem(`🔧 Maintainability: 8/10`, vscode.TreeItemCollapsibleState.None, 'maintainability'),\n                new CodeQualityItem(`⚡ Performance: 7/10`, vscode.TreeItemCollapsibleState.None, 'performance')\n            ];\n        } catch (error) {\n            return [new CodeQualityItem('Error loading overview', vscode.TreeItemCollapsibleState.None, 'error')];\n        }\n    }\n\n    private async getPredictionItems(): Promise<CodeQualityItem[]> {\n        try {\n            // Mock prediction data\n            const predictions = {\n                potentialBugs: Math.floor(Math.random() * 5) + 1,\n                securityIssues: Math.floor(Math.random() * 3),\n                performanceIssues: Math.floor(Math.random() * 4) + 1,\n                maintainabilityRisk: Math.floor(Math.random() * 30) + 20\n            };\n            \n            return [\n                new CodeQualityItem(`🐛 Potential Bugs: ${predictions.potentialBugs}`, vscode.TreeItemCollapsibleState.None, 'bugs'),\n                new CodeQualityItem(`🔒 Security Issues: ${predictions.securityIssues}`, vscode.TreeItemCollapsibleState.None, 'security'),\n                new CodeQualityItem(`⚡ Performance Issues: ${predictions.performanceIssues}`, vscode.TreeItemCollapsibleState.None, 'performance'),\n                new CodeQualityItem(`🔧 Maintenance Risk: ${predictions.maintainabilityRisk}%`, vscode.TreeItemCollapsibleState.None, 'maintenance')\n            ];\n        } catch (error) {\n            return [new CodeQualityItem('Error loading predictions', vscode.TreeItemCollapsibleState.None, 'error')];\n        }\n    }\n\n    private async getPatternItems(): Promise<CodeQualityItem[]> {\n        try {\n            // Mock pattern data\n            const patterns = {\n                complexity: Math.floor(Math.random() * 30) + 60,\n                duplication: Math.floor(Math.random() * 20) + 5,\n                testCoverage: Math.floor(Math.random() * 40) + 50,\n                codeSmells: Math.floor(Math.random() * 8) + 2\n            };\n            \n            return [\n                new CodeQualityItem(`🔄 Complexity Score: ${patterns.complexity}/100`, vscode.TreeItemCollapsibleState.None, 'complexity'),\n                new CodeQualityItem(`📋 Code Duplication: ${patterns.duplication}%`, vscode.TreeItemCollapsibleState.None, 'duplication'),\n                new CodeQualityItem(`🧪 Test Coverage: ${patterns.testCoverage}%`, vscode.TreeItemCollapsibleState.None, 'coverage'),\n                new CodeQualityItem(`👃 Code Smells: ${patterns.codeSmells}`, vscode.TreeItemCollapsibleState.None, 'smells')\n            ];\n        } catch (error) {\n            return [new CodeQualityItem('Error loading patterns', vscode.TreeItemCollapsibleState.None, 'error')];\n        }\n    }\n}\n\nclass CodeQualityItem extends vscode.TreeItem {\n    constructor(\n        public readonly label: string,\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n        public readonly contextValue: string\n    ) {\n        super(label, collapsibleState);\n        this.tooltip = `${this.label}`;\n        \n        // Add icons based on context\n        switch (contextValue) {\n            case 'quality':\n                this.iconPath = new vscode.ThemeIcon('pulse');\n                break;\n            case 'risk':\n            case 'bugs':\n                this.iconPath = new vscode.ThemeIcon('bug');\n                break;\n            case 'maintainability':\n            case 'maintenance':\n                this.iconPath = new vscode.ThemeIcon('tools');\n                break;\n            case 'performance':\n                this.iconPath = new vscode.ThemeIcon('zap');\n                break;\n            case 'security':\n                this.iconPath = new vscode.ThemeIcon('shield');\n                break;\n            case 'complexity':\n                this.iconPath = new vscode.ThemeIcon('graph');\n                break;\n            case 'duplication':\n                this.iconPath = new vscode.ThemeIcon('copy');\n                break;\n            case 'coverage':\n                this.iconPath = new vscode.ThemeIcon('beaker');\n                break;\n            case 'smells':\n                this.iconPath = new vscode.ThemeIcon('warning');\n                break;\n            default:\n                this.iconPath = new vscode.ThemeIcon('info');\n        }\n    }\n}","import * as vscode from 'vscode';\nimport { QualityPattern } from '../prediction/AnalysisEngine';\n\nexport interface StoredData {\n    qualityHistory: QualityPattern[];\n    userSettings: UserSettings;\n    modelData: ModelData;\n    sessionData: SessionData[];\n}\n\nexport interface UserSettings {\n    qualityThreshold: number;\n    notificationThreshold: number;\n    enableAutoTracking: boolean;\n    enablePredictions: boolean;\n    analysisDepth: 'fast' | 'thorough' | 'deep';\n    lastSyncTime: number;\n}\n\nexport interface ModelData {\n    regressionWeights: number[];\n    regressionBias: number;\n    timeSeriesData: any;\n    lastTrainingTime: number;\n    trainingDataCount: number;\n}\n\nexport interface SessionData {\n    id: string;\n    startTime: number;\n    endTime: number;\n    qualityScore: number;\n    linesAnalyzed: number;\n    filesModified: string[];\n    projectType: string;\n    complexity: number;\n}\n\nexport class DataStorage {\n    private readonly STORAGE_KEY = 'codeQuality';\n    private readonly MAX_HISTORY_ENTRIES = 1000;\n    private readonly MAX_SESSION_ENTRIES = 100;\n\n    constructor(private context: vscode.ExtensionContext) {}\n\n    /**\n     * Save quality history to persistent storage\n     */\n    async saveQualityHistory(qualityHistory: QualityPattern[]): Promise<void> {\n        try {\n            // Limit history size\n            const limitedHistory = qualityHistory.slice(-this.MAX_HISTORY_ENTRIES);\n            \n            await this.context.globalState.update(\n                `${this.STORAGE_KEY}.qualityHistory`,\n                limitedHistory\n            );\n        } catch (error) {\n            console.error('Failed to save quality history:', error);\n        }\n    }\n\n    /**\n     * Load quality history from persistent storage\n     */\n    async loadQualityHistory(): Promise<QualityPattern[]> {\n        try {\n            const history = this.context.globalState.get<QualityPattern[]>(\n                `${this.STORAGE_KEY}.qualityHistory`\n            );\n            return history || [];\n        } catch (error) {\n            console.error('Failed to load quality history:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Save user settings\n     */\n    async saveUserSettings(settings: UserSettings): Promise<void> {\n        try {\n            await this.context.globalState.update(\n                `${this.STORAGE_KEY}.userSettings`,\n                settings\n            );\n        } catch (error) {\n            console.error('Failed to save user settings:', error);\n        }\n    }\n\n    /**\n     * Load user settings with defaults\n     */\n    async loadUserSettings(): Promise<UserSettings> {\n        try {\n            const settings = this.context.globalState.get<UserSettings>(\n                `${this.STORAGE_KEY}.userSettings`\n            );\n            \n            // Return defaults if no settings found\n            return {\n                qualityThreshold: 75,\n                notificationThreshold: 50,\n                enableAutoTracking: true,\n                enablePredictions: true,\n                analysisDepth: 'thorough',\n                lastSyncTime: 0,\n                ...settings\n            };\n        } catch (error) {\n            console.error('Failed to load user settings:', error);\n            return {\n                qualityThreshold: 75,\n                notificationThreshold: 50,\n                enableAutoTracking: true,\n                enablePredictions: true,\n                analysisDepth: 'thorough',\n                lastSyncTime: 0\n            };\n        }\n    }\n\n    /**\n     * Save model training data\n     */\n    async saveModelData(modelData: ModelData): Promise<void> {\n        try {\n            await this.context.globalState.update(\n                `${this.STORAGE_KEY}.modelData`,\n                modelData\n            );\n        } catch (error) {\n            console.error('Failed to save model data:', error);\n        }\n    }\n\n    /**\n     * Load model training data\n     */\n    async loadModelData(): Promise<ModelData | null> {\n        try {\n            return this.context.globalState.get<ModelData>(\n                `${this.STORAGE_KEY}.modelData`\n            ) || null;\n        } catch (error) {\n            console.error('Failed to load model data:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Save session data\n     */\n    async saveSessionData(sessionData: SessionData[]): Promise<void> {\n        try {\n            const limitedSessions = sessionData.slice(-this.MAX_SESSION_ENTRIES);\n            \n            await this.context.globalState.update(\n                `${this.STORAGE_KEY}.sessionData`,\n                limitedSessions\n            );\n        } catch (error) {\n            console.error('Failed to save session data:', error);\n        }\n    }\n\n    /**\n     * Load session data\n     */\n    async loadSessionData(): Promise<SessionData[]> {\n        try {\n            return this.context.globalState.get<SessionData[]>(\n                `${this.STORAGE_KEY}.sessionData`\n            ) || [];\n        } catch (error) {\n            console.error('Failed to load session data:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Clear all stored data\n     */\n    async clearAllData(): Promise<void> {\n        try {\n            await this.context.globalState.update(`${this.STORAGE_KEY}.qualityHistory`, undefined);\n            await this.context.globalState.update(`${this.STORAGE_KEY}.userSettings`, undefined);\n            await this.context.globalState.update(`${this.STORAGE_KEY}.modelData`, undefined);\n            await this.context.globalState.update(`${this.STORAGE_KEY}.sessionData`, undefined);\n        } catch (error) {\n            console.error('Failed to clear data:', error);\n        }\n    }\n\n    /**\n     * Migrate data from old format (if needed)\n     */\n    async migrateData(): Promise<void> {\n        try {\n            // Check if old WindsuCredit data exists\n            const oldSettings = this.context.globalState.get('windsuCredit.userSettings');\n            if (oldSettings) {\n                // Clear old data\n                await this.context.globalState.update('windsuCredit.userSettings', undefined);\n                await this.context.globalState.update('windsuCredit.usageHistory', undefined);\n                await this.context.globalState.update('windsuCredit.modelData', undefined);\n                console.log('Migrated from old WindsuCredit data format');\n            }\n        } catch (error) {\n            console.error('Failed to migrate data:', error);\n        }\n    }\n\n    /**\n     * Export all data for backup\n     */\n    async exportAllData(): Promise<StoredData> {\n        const qualityHistory = await this.loadQualityHistory();\n        const userSettings = await this.loadUserSettings();\n        const modelData = await this.loadModelData();\n        const sessionData = await this.loadSessionData();\n\n        return {\n            qualityHistory,\n            userSettings,\n            modelData: modelData || {\n                regressionWeights: [],\n                regressionBias: 0,\n                timeSeriesData: null,\n                lastTrainingTime: 0,\n                trainingDataCount: 0\n            },\n            sessionData\n        };\n    }\n\n    /**\n     * Import data from backup\n     */\n    async importAllData(data: StoredData): Promise<void> {\n        await this.saveQualityHistory(data.qualityHistory);\n        await this.saveUserSettings(data.userSettings);\n        await this.saveModelData(data.modelData);\n        await this.saveSessionData(data.sessionData);\n    }\n}","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport interface ProjectMetrics {\n    fileCount: number;\n    totalLines: number;\n    complexity: number;\n    projectType: string;\n    languages: string[];\n    hasTests: boolean;\n    hasDependencies: boolean;\n    gitActivity: number;\n}\n\nexport class ProjectAnalyzer {\n    private cachedMetrics: ProjectMetrics | null = null;\n    private lastAnalysisTime: number = 0;\n    private cacheValidityMs = 5 * 60 * 1000; // 5 minutes\n\n    /**\n     * Analyze the current workspace to understand project characteristics\n     */\n    async analyzeCurrentProject(): Promise<ProjectMetrics> {\n        const now = Date.now();\n        \n        // Return cached metrics if still valid\n        if (this.cachedMetrics && (now - this.lastAnalysisTime) < this.cacheValidityMs) {\n            return this.cachedMetrics;\n        }\n\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders || workspaceFolders.length === 0) {\n            return this.getDefaultMetrics();\n        }\n\n        const rootPath = workspaceFolders[0].uri.fsPath;\n        \n        try {\n            const metrics = await this.performAnalysis(rootPath);\n            this.cachedMetrics = metrics;\n            this.lastAnalysisTime = now;\n            return metrics;\n        } catch (error) {\n            console.error('Error analyzing project:', error);\n            return this.getDefaultMetrics();\n        }\n    }\n\n\n    /**\n     * Analyze file to predict if it might trigger Cascade operations\n     */\n    async analyzeCascadePotential(filePath: string): Promise<{\n        probability: number;\n        reasons: string[];\n        estimatedFiles: number;\n    }> {\n        const reasons: string[] = [];\n        let probability = 0;\n        let estimatedFiles = 1;\n\n        try {\n            const fileName = path.basename(filePath);\n            const fileExtension = path.extname(filePath);\n            const fileContent = await this.readFileContent(filePath);\n\n            // High cascade potential files\n            if (fileName === 'package.json') {\n                probability += 0.8;\n                reasons.push('Package.json changes often trigger dependency updates');\n                estimatedFiles += 15;\n            }\n\n            if (fileName.includes('config') || fileName.includes('webpack') || fileName.includes('tsconfig')) {\n                probability += 0.6;\n                reasons.push('Configuration files affect multiple files');\n                estimatedFiles += 8;\n            }\n\n            if (fileName.includes('types.ts') || fileName.includes('interfaces.ts')) {\n                probability += 0.5;\n                reasons.push('Type definitions affect multiple files');\n                estimatedFiles += 10;\n            }\n\n            // Analyze imports/exports\n            if (fileContent) {\n                const importMatches = fileContent.match(/import.*from/g) || [];\n                const exportMatches = fileContent.match(/export/g) || [];\n                \n                if (importMatches.length > 5) {\n                    probability += 0.3;\n                    reasons.push('File has many imports - changes may affect dependencies');\n                    estimatedFiles += importMatches.length * 0.5;\n                }\n\n                if (exportMatches.length > 3) {\n                    probability += 0.4;\n                    reasons.push('File exports many items - changes may affect consumers');\n                    estimatedFiles += exportMatches.length * 2;\n                }\n\n                // Check for common patterns that trigger cascades\n                if (fileContent.includes('interface ') || fileContent.includes('type ')) {\n                    probability += 0.3;\n                    reasons.push('Type definitions can cascade to dependent files');\n                }\n\n                if (fileContent.includes('const enum') || fileContent.includes('enum ')) {\n                    probability += 0.4;\n                    reasons.push('Enum changes often cascade to usage sites');\n                }\n            }\n\n            // File extension analysis\n            const highCascadeExtensions = ['.ts', '.tsx', '.d.ts'];\n            const mediumCascadeExtensions = ['.js', '.jsx', '.vue', '.svelte'];\n            \n            if (highCascadeExtensions.includes(fileExtension)) {\n                probability += 0.2;\n                reasons.push('TypeScript files have higher cascade potential');\n            } else if (mediumCascadeExtensions.includes(fileExtension)) {\n                probability += 0.1;\n                reasons.push('JavaScript files may affect dependent files');\n            }\n\n        } catch (error) {\n            console.error('Error analyzing cascade potential:', error);\n        }\n\n        return {\n            probability: Math.min(probability, 1.0),\n            reasons,\n            estimatedFiles: Math.round(estimatedFiles)\n        };\n    }\n\n    /**\n     * Get project complexity breakdown\n     */\n    async getComplexityBreakdown(): Promise<{\n        overall: number;\n        factors: Array<{\n            factor: string;\n            score: number;\n            weight: number;\n            description: string;\n        }>;\n    }> {\n        const metrics = await this.analyzeCurrentProject();\n        \n        const factors = [\n            {\n                factor: 'File Count',\n                score: this.normalizeFileCount(metrics.fileCount),\n                weight: 0.15,\n                description: `${metrics.fileCount} files in project`\n            },\n            {\n                factor: 'Lines of Code',\n                score: this.normalizeLineCount(metrics.totalLines),\n                weight: 0.10,\n                description: `${metrics.totalLines} total lines`\n            },\n            {\n                factor: 'Language Complexity',\n                score: this.getLanguageComplexity(metrics.languages),\n                weight: 0.25,\n                description: `Languages: ${metrics.languages.join(', ')}`\n            },\n            {\n                factor: 'Dependencies',\n                score: metrics.hasDependencies ? 0.8 : 0.2,\n                weight: 0.15,\n                description: metrics.hasDependencies ? 'Has external dependencies' : 'No dependencies detected'\n            },\n            {\n                factor: 'Testing Setup',\n                score: metrics.hasTests ? 0.6 : 0.9,\n                weight: 0.10,\n                description: metrics.hasTests ? 'Has test files' : 'No test files detected'\n            },\n            {\n                factor: 'Git Activity',\n                score: this.normalizeGitActivity(metrics.gitActivity),\n                weight: 0.15,\n                description: `Git activity score: ${metrics.gitActivity}`\n            },\n            {\n                factor: 'Project Type',\n                score: this.getProjectTypeComplexity(metrics.projectType),\n                weight: 0.10,\n                description: `Project type: ${metrics.projectType}`\n            }\n        ];\n\n        const overall = factors.reduce((sum, factor) => \n            sum + (factor.score * factor.weight), 0);\n\n        return {\n            overall: Math.round(overall * 100) / 100,\n            factors\n        };\n    }\n\n    private async performAnalysis(rootPath: string): Promise<ProjectMetrics> {\n        const [\n            fileCount,\n            totalLines,\n            projectType,\n            languages,\n            hasTests,\n            hasDependencies,\n            gitActivity\n        ] = await Promise.all([\n            this.countFiles(rootPath),\n            this.countTotalLines(rootPath),\n            this.detectProjectType(rootPath),\n            this.detectLanguages(rootPath),\n            this.checkForTests(rootPath),\n            this.checkForDependencies(rootPath),\n            this.analyzeGitActivity(rootPath)\n        ]);\n\n        const complexity = this.calculateComplexity({\n            fileCount,\n            totalLines,\n            projectType,\n            languages,\n            hasTests,\n            hasDependencies,\n            gitActivity\n        });\n\n\n        return {\n            fileCount,\n            totalLines,\n            complexity,\n            projectType,\n            languages,\n            hasTests,\n            hasDependencies,\n            gitActivity\n        };\n    }\n\n    private async countFiles(rootPath: string): Promise<number> {\n        try {\n            const files = await this.getAllFiles(rootPath);\n            return files.filter(file => !this.shouldIgnoreFile(file)).length;\n        } catch {\n            return 0;\n        }\n    }\n\n    private async countTotalLines(rootPath: string): Promise<number> {\n        try {\n            const files = await this.getAllFiles(rootPath);\n            let totalLines = 0;\n\n            for (const file of files) {\n                if (!this.shouldIgnoreFile(file)) {\n                    const content = await this.readFileContent(file);\n                    if (content) {\n                        totalLines += content.split('\\n').length;\n                    }\n                }\n            }\n\n            return totalLines;\n        } catch {\n            return 0;\n        }\n    }\n\n    private async detectProjectType(rootPath: string): Promise<string> {\n        const packageJsonPath = path.join(rootPath, 'package.json');\n        \n        try {\n            if (fs.existsSync(packageJsonPath)) {\n                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n                \n                // Check dependencies for framework detection\n                const allDeps = {\n                    ...packageJson.dependencies,\n                    ...packageJson.devDependencies\n                };\n\n                if (allDeps.react) return 'React';\n                if (allDeps.vue) return 'Vue.js';\n                if (allDeps.angular || allDeps['@angular/core']) return 'Angular';\n                if (allDeps.next) return 'Next.js';\n                if (allDeps.nuxt) return 'Nuxt.js';\n                if (allDeps.express) return 'Express.js';\n                if (allDeps.typescript) return 'TypeScript';\n                \n                return 'Node.js';\n            }\n\n            // Check for other indicators\n            if (fs.existsSync(path.join(rootPath, 'requirements.txt'))) return 'Python';\n            if (fs.existsSync(path.join(rootPath, 'Cargo.toml'))) return 'Rust';\n            if (fs.existsSync(path.join(rootPath, 'go.mod'))) return 'Go';\n            if (fs.existsSync(path.join(rootPath, 'pom.xml'))) return 'Java';\n\n        } catch (error) {\n            console.error('Error detecting project type:', error);\n        }\n\n        return 'Unknown';\n    }\n\n    private async detectLanguages(rootPath: string): Promise<string[]> {\n        try {\n            const files = await this.getAllFiles(rootPath);\n            const extensions = new Set<string>();\n\n            files.forEach(file => {\n                if (!this.shouldIgnoreFile(file)) {\n                    const ext = path.extname(file);\n                    if (ext) {\n                        extensions.add(ext);\n                    }\n                }\n            });\n\n            const languageMap: Record<string, string> = {\n                '.js': 'JavaScript',\n                '.ts': 'TypeScript',\n                '.tsx': 'TypeScript',\n                '.jsx': 'JavaScript',\n                '.py': 'Python',\n                '.java': 'Java',\n                '.cpp': 'C++',\n                '.c': 'C',\n                '.cs': 'C#',\n                '.go': 'Go',\n                '.rs': 'Rust',\n                '.php': 'PHP',\n                '.rb': 'Ruby',\n                '.swift': 'Swift',\n                '.kt': 'Kotlin',\n                '.html': 'HTML',\n                '.css': 'CSS',\n                '.scss': 'SCSS',\n                '.less': 'LESS',\n                '.vue': 'Vue',\n                '.svelte': 'Svelte'\n            };\n\n            const languages = Array.from(extensions)\n                .map(ext => languageMap[ext])\n                .filter(lang => lang !== undefined);\n\n            return languages.length > 0 ? languages : ['Unknown'];\n        } catch {\n            return ['Unknown'];\n        }\n    }\n\n    private async checkForTests(rootPath: string): Promise<boolean> {\n        try {\n            const files = await this.getAllFiles(rootPath);\n            return files.some(file => \n                file.includes('test') || \n                file.includes('spec') || \n                file.includes('__tests__')\n            );\n        } catch {\n            return false;\n        }\n    }\n\n    private async checkForDependencies(rootPath: string): Promise<boolean> {\n        const dependencyFiles = [\n            'package.json',\n            'requirements.txt',\n            'Cargo.toml',\n            'go.mod',\n            'pom.xml',\n            'composer.json'\n        ];\n\n        return dependencyFiles.some(file => \n            fs.existsSync(path.join(rootPath, file))\n        );\n    }\n\n    private async analyzeGitActivity(rootPath: string): Promise<number> {\n        try {\n            const gitPath = path.join(rootPath, '.git');\n            if (!fs.existsSync(gitPath)) {\n                return 0.5; // Not a git repo\n            }\n\n            // Simple heuristic based on file modification times\n            const files = await this.getAllFiles(rootPath);\n            const now = Date.now();\n            const oneWeek = 7 * 24 * 60 * 60 * 1000;\n            \n            let recentFiles = 0;\n            for (const file of files.slice(0, 100)) { // Sample first 100 files\n                try {\n                    const stats = fs.statSync(file);\n                    if (now - stats.mtime.getTime() < oneWeek) {\n                        recentFiles++;\n                    }\n                } catch {\n                    // Ignore errors for individual files\n                }\n            }\n\n            return Math.min(recentFiles / 10, 1.0); // Normalize to 0-1\n        } catch {\n            return 0.5;\n        }\n    }\n\n    private calculateComplexity(factors: {\n        fileCount: number;\n        totalLines: number;\n        projectType: string;\n        languages: string[];\n        hasTests: boolean;\n        hasDependencies: boolean;\n        gitActivity: number;\n    }): number {\n        let complexity = 0;\n\n        // File count contribution (0-0.3)\n        complexity += Math.min(factors.fileCount / 100, 0.3);\n\n        // Lines of code contribution (0-0.2)\n        complexity += Math.min(factors.totalLines / 10000, 0.2);\n\n        // Language complexity (0-0.25)\n        complexity += this.getLanguageComplexity(factors.languages) * 0.25;\n\n        // Project type complexity (0-0.15)\n        complexity += this.getProjectTypeComplexity(factors.projectType) * 0.15;\n\n        // Dependencies add complexity (0-0.1)\n        if (factors.hasDependencies) {\n            complexity += 0.1;\n        }\n\n        return Math.min(complexity, 1.0);\n    }\n\n    private getLanguageComplexity(languages: string[]): number {\n        const complexityMap: Record<string, number> = {\n            'TypeScript': 0.9,\n            'C++': 0.95,\n            'Java': 0.8,\n            'C#': 0.8,\n            'JavaScript': 0.6,\n            'Python': 0.5,\n            'Go': 0.7,\n            'Rust': 0.9,\n            'HTML': 0.2,\n            'CSS': 0.3,\n            'Unknown': 0.5\n        };\n\n        const avgComplexity = languages.reduce((sum, lang) => \n            sum + (complexityMap[lang] || 0.5), 0) / languages.length;\n\n        return avgComplexity;\n    }\n\n    private getProjectTypeComplexity(projectType: string): number {\n        const complexityMap: Record<string, number> = {\n            'React': 0.8,\n            'Angular': 0.9,\n            'Vue.js': 0.7,\n            'Next.js': 0.8,\n            'TypeScript': 0.7,\n            'Node.js': 0.6,\n            'Python': 0.5,\n            'Java': 0.8,\n            'Unknown': 0.5\n        };\n\n        return complexityMap[projectType] || 0.5;\n    }\n\n\n    private async getAllFiles(dirPath: string): Promise<string[]> {\n        const files: string[] = [];\n        \n        try {\n            const items = fs.readdirSync(dirPath);\n            \n            for (const item of items) {\n                if (this.shouldIgnoreDir(item)) continue;\n                \n                const fullPath = path.join(dirPath, item);\n                const stats = fs.statSync(fullPath);\n                \n                if (stats.isDirectory()) {\n                    const subFiles = await this.getAllFiles(fullPath);\n                    files.push(...subFiles);\n                } else {\n                    files.push(fullPath);\n                }\n            }\n        } catch (error) {\n            // Ignore errors and continue\n        }\n        \n        return files;\n    }\n\n    private shouldIgnoreDir(dirName: string): boolean {\n        const ignoreDirs = [\n            'node_modules',\n            '.git',\n            'dist',\n            'build',\n            'coverage',\n            '__pycache__',\n            '.vscode',\n            '.idea'\n        ];\n        \n        return ignoreDirs.includes(dirName) || dirName.startsWith('.');\n    }\n\n    private shouldIgnoreFile(filePath: string): boolean {\n        const ignoreExtensions = ['.log', '.tmp', '.cache'];\n        const ignoreFiles = ['package-lock.json', 'yarn.lock'];\n        \n        const fileName = path.basename(filePath);\n        const extension = path.extname(filePath);\n        \n        return ignoreExtensions.includes(extension) || \n               ignoreFiles.includes(fileName) ||\n               fileName.startsWith('.');\n    }\n\n    private async readFileContent(filePath: string): Promise<string | null> {\n        try {\n            // Only read text files, skip large files\n            const stats = fs.statSync(filePath);\n            if (stats.size > 1024 * 1024) { // Skip files larger than 1MB\n                return null;\n            }\n\n            return fs.readFileSync(filePath, 'utf8');\n        } catch {\n            return null;\n        }\n    }\n\n    private normalizeFileCount(count: number): number {\n        // Normalize file count to 0-1 scale\n        return Math.min(count / 200, 1.0);\n    }\n\n    private normalizeLineCount(lines: number): number {\n        // Normalize line count to 0-1 scale\n        return Math.min(lines / 50000, 1.0);\n    }\n\n    private normalizeGitActivity(activity: number): number {\n        // Already normalized in analyzeGitActivity\n        return activity;\n    }\n\n    private getDefaultMetrics(): ProjectMetrics {\n        return {\n            fileCount: 1,\n            totalLines: 100,\n            complexity: 0.5,\n            projectType: 'Unknown',\n            languages: ['Unknown'],\n            hasTests: false,\n            hasDependencies: false,\n            gitActivity: 0.5\n        };\n    }\n}","module.exports = require(\"fs\");","import { QualityPattern } from '../AnalysisEngine';\n\nexport interface TimeSeriesPrediction {\n    daily: number;\n    weekly: number;\n    trend: 'improving' | 'declining' | 'stable';\n    seasonality: number;\n    confidence: number;\n}\n\nexport class TimeSeriesModel {\n    private trendCoefficient: number = 0;\n    private seasonalFactors: number[] = [];\n    private isInitialized: boolean = false;\n\n    /**\n     * Train the time series model with quality history\n     */\n    train(qualityHistory: QualityPattern[]): void {\n        if (qualityHistory.length < 7) {\n            console.log('Insufficient data for time series analysis');\n            return;\n        }\n\n        this.analyzeTrend(qualityHistory);\n        this.analyzeSeasonality(qualityHistory);\n        this.isInitialized = true;\n    }\n\n    /**\n     * Predict future quality trends\n     */\n    predict(qualityHistory: QualityPattern[]): TimeSeriesPrediction {\n        if (!this.isInitialized || qualityHistory.length === 0) {\n            return this.defaultPrediction();\n        }\n\n        const recentQuality = qualityHistory.slice(-7); // Last week\n        const avgQuality = recentQuality.reduce((sum, q) => sum + q.qualityScore, 0) / recentQuality.length;\n        \n        // Apply trend\n        const dailyPrediction = avgQuality + this.trendCoefficient;\n        const weeklyPrediction = avgQuality + (this.trendCoefficient * 7);\n\n        // Determine trend direction\n        let trend: 'improving' | 'declining' | 'stable' = 'stable';\n        if (this.trendCoefficient > 2) trend = 'improving';\n        else if (this.trendCoefficient < -2) trend = 'declining';\n\n        const confidence = this.calculateConfidence(qualityHistory.length);\n\n        return {\n            daily: Math.max(0, Math.min(100, Math.round(dailyPrediction))),\n            weekly: Math.max(0, Math.min(100, Math.round(weeklyPrediction))),\n            trend,\n            seasonality: this.calculateSeasonality(),\n            confidence\n        };\n    }\n\n    /**\n     * Analyze quality trend over time\n     */\n    private analyzeTrend(qualityHistory: QualityPattern[]): void {\n        if (qualityHistory.length < 2) {\n            this.trendCoefficient = 0;\n            return;\n        }\n\n        // Simple linear trend calculation\n        const n = qualityHistory.length;\n        let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;\n\n        qualityHistory.forEach((quality, index) => {\n            sumX += index;\n            sumY += quality.qualityScore;\n            sumXY += index * quality.qualityScore;\n            sumXX += index * index;\n        });\n\n        // Calculate slope (trend coefficient)\n        this.trendCoefficient = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    }\n\n    /**\n     * Analyze seasonal patterns in quality\n     */\n    private analyzeSeasonality(qualityHistory: QualityPattern[]): void {\n        // Simple weekly seasonality (7 day cycle)\n        this.seasonalFactors = new Array(7).fill(0);\n        const dailyCounts = new Array(7).fill(0);\n\n        qualityHistory.forEach(quality => {\n            const dayOfWeek = new Date(quality.timestamp).getDay();\n            this.seasonalFactors[dayOfWeek] += quality.qualityScore;\n            dailyCounts[dayOfWeek]++;\n        });\n\n        // Calculate average for each day of week\n        this.seasonalFactors = this.seasonalFactors.map((sum, index) => \n            dailyCounts[index] > 0 ? sum / dailyCounts[index] : 75\n        );\n    }\n\n    /**\n     * Calculate seasonal effect for current time\n     */\n    private calculateSeasonality(): number {\n        if (this.seasonalFactors.length === 0) return 0;\n        \n        const today = new Date().getDay();\n        const avgSeasonal = this.seasonalFactors.reduce((sum, factor) => sum + factor, 0) / 7;\n        \n        return this.seasonalFactors[today] - avgSeasonal;\n    }\n\n    /**\n     * Calculate prediction confidence\n     */\n    private calculateConfidence(dataPoints: number): number {\n        if (dataPoints < 7) return 0.3;\n        if (dataPoints < 30) return 0.6;\n        if (dataPoints < 90) return 0.8;\n        return 0.9;\n    }\n\n    /**\n     * Default prediction when model is not initialized\n     */\n    private defaultPrediction(): TimeSeriesPrediction {\n        return {\n            daily: 75,\n            weekly: 75,\n            trend: 'stable',\n            seasonality: 0,\n            confidence: 0.3\n        };\n    }\n\n    /**\n     * Get current trend direction as string\n     */\n    getTrendDirection(): string {\n        if (this.trendCoefficient > 2) return 'Quality is improving';\n        if (this.trendCoefficient < -2) return 'Quality is declining';\n        return 'Quality is stable';\n    }\n\n    /**\n     * Get seasonal insights\n     */\n    getSeasonalInsights(): string[] {\n        if (this.seasonalFactors.length === 0) {\n            return ['Not enough data for seasonal analysis'];\n        }\n\n        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const avgQuality = this.seasonalFactors.reduce((sum, factor) => sum + factor, 0) / 7;\n        \n        const insights: string[] = [];\n        \n        this.seasonalFactors.forEach((factor, index) => {\n            if (factor > avgQuality + 5) {\n                insights.push(`${dayNames[index]} tends to have higher quality code`);\n            } else if (factor < avgQuality - 5) {\n                insights.push(`${dayNames[index]} tends to have lower quality code`);\n            }\n        });\n\n        return insights.length > 0 ? insights : ['No significant seasonal patterns detected'];\n    }\n}","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["constructor","context","qualityTracker","qualityHistory","isLearning","this","storage","DataStorage","regressionModel","LinearRegressionModel","timeSeriesModel","TimeSeriesModel","projectAnalyzer","ProjectAnalyzer","loadHistoricalData","startLearning","generateAnalysis","recentQuality","getRecentQuality","projectMetrics","analyzeCurrentProject","overallQuality","calculateQualityScore","regressionAnalysis","predict","bugRisk","calculateBugRisk","riskFactors","complexity","maintainabilityScore","calculateMaintainability","performanceScore","calculatePerformance","confidence","calculateConfidence","length","recommendations","generateQualityRecommendations","recordQuality","pattern","push","slice","saveQualityHistory","updateModels","detectQualityIssues","recentActivity","getRecentActivity","probability","severity","reason","complexityIncreases","duplicateCodeDetected","longFunctionsAdded","Math","min","max","trim","dayAgo","Date","now","filter","timestamp","avgQuality","reduce","sum","qualityScore","round","baseRisk","factorRisk","bugProbability","complexityFactor","qualityFactor","complexityPenalty","dataPoints","some","q","issuesFound","exportAnalytics","totalAnalyses","averageQuality","trend","lastAnalysis","generateTestData","testPattern","floor","random","sessionDuration","linesAnalyzed","filesModified","projectType","vscode","window","showInformationMessage","getOptimizationTips","history","loadQualityHistory","Array","isArray","error","console","warn","train","isTracking","sessionStart","filesAnalyzed","startTracking","log","stopTracking","recordQualityAnalysis","recordDuplicateCode","count","recordLongFunction","resetSession","getSessionDuration","generateQualityPattern","dispose","analysisEngine","patternDetector","dataStorage","statusBarItem","burnRateStatusBar","treeDataProvider","updateStatusBar","icon","text","tooltip","riskIcon","toFixed","async","analyzeCodeQuality","document","getText","lines","split","extension","fileName","pop","toLowerCase","linesOfCode","line","complexityPatterns","Object","entries","matches","match","calculateComplexity","duplicateLines","lineMap","Map","duplicates","forEach","trimmed","get","set","findDuplicateLines","longFunctions","func","findLongFunctions","maintainability","performance","issues","migrateData","QualityTracker","CodePatternDetector","AnalysisEngine","createStatusBarItem","StatusBarAlignment","Right","command","show","subscriptions","createStatusBarItems","CodeQualityProvider","registerTreeDataProvider","analyzeFileCommand","commands","registerCommand","activeEditor","activeTextEditor","showWarningMessage","analysis","refresh","showQualityCommand","action","executeCommand","predictIssuesCommand","createWebviewPanel","ViewColumn","One","enableScripts","webview","html","showErrorMessage","message","refreshCommand","openSettingsCommand","registerCommands","settings","loadUserSettings","enableAutoTracking","setInterval","then","initializePredictionSystem","globalState","update","showWelcomeMessage","Error","module","exports","require","disposables","setupFileWatchers","watcher","workspace","onDidChangeTextDocument","event","analyzeFileChanges","contentChanges","detectPatterns","hasLongFunctions","duplicateCount","findDuplicatePatterns","score","complexityIndicators","generateUsageReport","patternsDetected","d","weights","bias","isTrained","features","extractFeatures","targets","map","quality","trainLinearRegression","fallbackPrediction","extractFeaturesFromCurrent","prediction","predictValue","dailyTrend","weeklyTrend","calculatePredictionConfidence","daily","weekly","encodeProjectType","getTimeOfDay","getDayOfWeek","avgDuration","avgLines","avgFiles","avgIssues","avgComplexity","latestProjectType","numFeatures","fill","epoch","i","j","getHours","getDay","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","fire","getTreeItem","element","getChildren","CodeQualityItem","TreeItemCollapsibleState","Expanded","contextValue","getOverviewItems","getPredictionItems","getPatternItems","None","predictions","potentialBugs","securityIssues","performanceIssues","maintainabilityRisk","patterns","duplication","testCoverage","codeSmells","TreeItem","label","collapsibleState","super","iconPath","ThemeIcon","STORAGE_KEY","MAX_HISTORY_ENTRIES","MAX_SESSION_ENTRIES","limitedHistory","saveUserSettings","qualityThreshold","notificationThreshold","enablePredictions","analysisDepth","lastSyncTime","saveModelData","modelData","loadModelData","saveSessionData","sessionData","limitedSessions","loadSessionData","clearAllData","undefined","exportAllData","userSettings","regressionWeights","regressionBias","timeSeriesData","lastTrainingTime","trainingDataCount","importAllData","data","cachedMetrics","lastAnalysisTime","cacheValidityMs","workspaceFolders","getDefaultMetrics","rootPath","uri","fsPath","metrics","performAnalysis","analyzeCascadePotential","filePath","reasons","estimatedFiles","path","basename","fileExtension","extname","fileContent","readFileContent","includes","importMatches","exportMatches","mediumCascadeExtensions","getComplexityBreakdown","factors","factor","normalizeFileCount","fileCount","weight","description","normalizeLineCount","totalLines","getLanguageComplexity","languages","join","hasDependencies","hasTests","normalizeGitActivity","gitActivity","getProjectTypeComplexity","overall","Promise","all","countFiles","countTotalLines","detectProjectType","detectLanguages","checkForTests","checkForDependencies","analyzeGitActivity","getAllFiles","file","shouldIgnoreFile","files","content","packageJsonPath","fs","existsSync","packageJson","JSON","parse","readFileSync","allDeps","dependencies","devDependencies","react","vue","angular","next","nuxt","express","typescript","extensions","Set","ext","add","languageMap","from","lang","gitPath","oneWeek","recentFiles","statSync","mtime","getTime","complexityMap","dirPath","items","readdirSync","item","shouldIgnoreDir","fullPath","isDirectory","subFiles","dirName","startsWith","size","activity","trendCoefficient","seasonalFactors","isInitialized","analyzeTrend","analyzeSeasonality","defaultPrediction","dailyPrediction","weeklyPrediction","seasonality","calculateSeasonality","n","sumX","sumY","sumXY","sumXX","index","dailyCounts","dayOfWeek","today","avgSeasonal","getTrendDirection","getSeasonalInsights","dayNames","insights","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}